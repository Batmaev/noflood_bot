import asyncio
import datetime

from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ChatJoinRequest
from aiogram.exceptions import TelegramAPIError

from .long_texts import NO_FLOOD_LINK_HTML, CHATS, SERVICES, COUNTRIES, BLOGS
from . import logs
from ..utils.db import get_link, get_user, update_last_ad_time
from ..utils.config import BOT_TOKEN


router = Router()
bot = Bot(BOT_TOKEN)



async def welcome(message: Message, link_text: str):
    await message.answer('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!')

    if link_text is not None:
        monitored_link = get_link(link_text)
        link_html = logs.chat_link_html(monitored_link)
        await message.answer(
            '–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç ' + link_html,
            parse_mode='HTML',
        )
    else:
        await ad_after_auth(message)


chat_and_services_buttons = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ß–∞—Ç—ã', callback_data='chats')],
    [InlineKeyboardButton(text='–°–µ—Ä–≤–∏—Å—ã', callback_data='services')],
    [InlineKeyboardButton(text='–ü–æ —Å—Ç—Ä–∞–Ω–∞–º', callback_data='countries')],
    [InlineKeyboardButton(text='–ë–ª–æ–≥–∏', callback_data='blogs')],
])


async def ad_after_auth(message: Message):
    await message.answer(
        '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —É —Ñ–∏–∑—Ç–µ—Ö–æ–≤ –µ—Å—Ç—å —á–∞—Ç—ã, —Å–µ—Ä–≤–∏—Å—ã –∏ –±–ª–æ–≥–∏ ü•≥',
        reply_markup=chat_and_services_buttons
    )
    update_last_ad_time(message.from_user)


async def ad_after_join(request: ChatJoinRequest):
    await asyncio.sleep(60)
    bot_user = get_user(request.from_user)
    if (datetime.datetime.now() - bot_user.last_ad_time) >= datetime.timedelta(days=1):
        await request.answer_pm(
            '–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫–∏–µ –µ—Å—Ç—å —á–∞—Ç—ã/—Å–µ—Ä–≤–∏—Å—ã/–±–ª–æ–≥–∏ —É —Ñ–∏–∑—Ç–µ—Ö–æ–≤?',
            reply_markup=chat_and_services_buttons
        )
        update_last_ad_time(request.from_user)



@router.callback_query(F.data == 'chats')
@router.callback_query(F.data == 'services')
@router.callback_query(F.data == 'countries')
@router.callback_query(F.data == 'blogs')
async def switch_chats_and_services(query: CallbackQuery):
    match query.data:
        case 'chats':
            text = CHATS
        case 'services':
            text = SERVICES
        case 'countries':
            text = COUNTRIES
        case 'blogs':
            text = BLOGS

    try:
        await query.message.delete()
    except TelegramAPIError:
        pass

    await query.message.answer(text, reply_markup=chat_and_services_buttons, parse_mode='HTML',
                               disable_web_page_preview=True)
    await query.answer()
    update_last_ad_time(query.from_user)
    logs.button_pressed(query.from_user, query.data)




# Legacy buttons for old users
@router.callback_query(F.data == 'no_flood')
@router.callback_query(F.data == 'agree')
async def invite_to_no_flood(query: CallbackQuery):
    await query.answer()
    await query.message.answer(
        f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—â–µ—Ñ–∏–∑—Ç–µ—Ö–æ–≤—Å–∫–∏–π —á–∞—Ç {NO_FLOOD_LINK_HTML}',
        parse_mode='HTML',
    )
