from aiogram import Router, Bot
from aiogram.types import Message, ChatJoinRequest
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

from ..utils.config import BOT_TOKEN
from ..utils.db import UserStatus, MonitoredLink, save_link, get_link, save_user, get_user
from . import logs

router = Router()
bot = Bot(BOT_TOKEN)


@router.message(Command('make_link'))
async def make_link(message: Message):
    try:
        link = await bot.create_chat_invite_link(message.chat.id, creates_join_request=True)
    except TelegramBadRequest as error:
        await message.reply(str(error))
        return

    save_link(link.invite_link, message.chat.title)
    await message.reply(f'–°—Å—ã–ª–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —Å–æ–∑–¥–∞–Ω–∞: {link.invite_link}\n\n'
                        '–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–µ—Ö, –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ñ–∏–∑—Ç–µ—Ö–æ–≤—Å–∫—É—é –ø–æ—á—Ç—É, '
                        '–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–º.')

@router.chat_join_request()
async def accept_or_decline(request: ChatJoinRequest):
    monitored_link = get_link(request.invite_link.invite_link)
    if monitored_link is None:
        return

    bot_user = get_user(request.from_user)
    if bot_user is None or bot_user.status != UserStatus.AUTHORIZED:
        save_user(request.from_user, monitored_link)
        await request.decline()
        await talk_to_user(request, monitored_link)

    else:
        await request.approve()
        await congrats_user(request, monitored_link)
        logs.chat_join(request.from_user, monitored_link)


async def talk_to_user(request: ChatJoinRequest, monitored_link: MonitoredLink):
    await request.answer_pm(
    f'–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ {monitored_link.chat_name}.\n\n'
    '–≠—Ç–æ—Ç —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏–∑—Ç–µ—Ö–æ–≤. '
    '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ —ç—Ç–æ–º –±–æ—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π –≤—Å—Ç—É–ø–∏—Ç—å —Å–Ω–æ–≤–∞.\n\n'
    '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start'
)

async def congrats_user(request: ChatJoinRequest, monitored_link: MonitoredLink):
    await request.answer_pm(
    f'–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ {logs.chat_link_html(monitored_link)} –ø—Ä–∏–Ω—è—Ç–∞ üéâ',
    parse_mode='HTML',
    disable_web_page_preview=True
)


@router.message(Command('error'))
async def test_error(message: Message):
    raise ValueError('test error')
