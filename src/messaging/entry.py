from aiogram import Router, Bot
from aiogram.types import Message, ChatJoinRequest, ChatMemberUpdated
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

from .ads import ad_after_join
from ..utils.config import BOT_TOKEN
from ..utils.db import UserStatus, MonitoredLink, save_link, get_link, save_user, get_user
from . import logs

router = Router()
bot = Bot(BOT_TOKEN)


async def make_link(update: Message | ChatMemberUpdated):
    try:
        link = await bot.create_chat_invite_link(update.chat.id, creates_join_request=True)
    except TelegramBadRequest as error:
        await update.answer(str(error))
        return

    save_link(link.invite_link, update.chat.title, update.chat.id)
    await update.answer(f'–°–æ–∑–¥–∞–Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º: {link.invite_link}\n\n'
                        '–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–µ—Ö, –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ñ–∏–∑—Ç–µ—Ö–æ–≤—Å–∫—É—é –ø–æ—á—Ç—É, '
                        '–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –æ—Å—Ç–∞–ª—å–Ω—ã–º.')



@router.message(Command('make_link'))
async def process_make_link_command(message: Message):
    if message.chat.type == 'private':
        await message.answer('–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —á–∞—Ç–µ')
        return

    async def is_sender_admin(message: Message):
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        return member.status in ('administrator', 'creator')

    if not await is_sender_admin(message):
        await message.answer('–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞')
        return
    await make_link(message)


@router.my_chat_member()
async def process_my_chat_member(update: ChatMemberUpdated):
    if update.new_chat_member.status in ('kicked', 'left'):
        logs.bot_kicked(update.chat, update.from_user)
        return

    def check_status(member):
        return member.status == 'administrator' and member.can_invite_users

    was_ok = check_status(update.old_chat_member)
    is_ok = check_status(update.new_chat_member)

    if is_ok and not was_ok:
        await make_link(update)

    elif not is_ok and not was_ok:
        await update.answer(
            '–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏. '
            '–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –¥–∞—Ç—å –ø—Ä–∞–≤–æ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
        )

    elif was_ok and not is_ok:
        await update.answer(
            '–ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ—Ç —á–∞—Ç. '
            '–ï–º—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤'
        )


@router.chat_join_request()
async def accept_or_decline(request: ChatJoinRequest):
    if request.invite_link is not None:
        monitored_link = get_link(request.invite_link.invite_link)
        if monitored_link is None:
            return
    else:
        # public chat; Telegram will not say which link was used
        monitored_link = MonitoredLink(
            chat_name=request.chat.title,
            chat_id=request.chat.id,
            link=f'https://t.me/{request.chat.username}'
        )

    bot_user = get_user(request.from_user)
    if bot_user is None or bot_user.status != UserStatus.AUTHORIZED:
        save_user(request.from_user, monitored_link)
        await request.decline()
        await talk_to_user(request, monitored_link)

    else:
        await request.approve()
        await congrats_user(request, monitored_link)
        logs.chat_join(request.from_user, monitored_link)
        await ad_after_join(request)


async def talk_to_user(request: ChatJoinRequest, monitored_link: MonitoredLink):
    await request.answer_pm(
    f'–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—Å—Ç—É–ø–∏—Ç—å –≤ {monitored_link.chat_name}.\n\n'
    '–≠—Ç–æ—Ç —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–∏–∑—Ç–µ—Ö–æ–≤. '
    '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ —ç—Ç–æ–º –±–æ—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π –≤—Å—Ç—É–ø–∏—Ç—å —Å–Ω–æ–≤–∞.\n\n'
    '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start'
)


async def congrats_user(request: ChatJoinRequest, monitored_link: MonitoredLink):
    await request.answer_pm(
        f'–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ {logs.chat_link_html(monitored_link)} –ø—Ä–∏–Ω—è—Ç–∞ üéâ',
        parse_mode='HTML',
        disable_web_page_preview=True
    )



@router.message(Command('error'))
async def test_error(message: Message):
    raise ValueError('test error')
