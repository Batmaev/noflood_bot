from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from .ads import welcome_with_utm, welcome_with_no_flood, show_chats_and_services
from ..utils.db import save_user, save_email, save_code, get_user, authorize, UserStatus
from ..utils.mailing import send_code


router = Router()


authorize_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üëâüëåüèª', callback_data='authorize')]
    ]
)


@router.message(CommandStart())
async def start(message: Message):
    await message.answer('üëã')
    await message.answer(
        '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –æ–±—â–∏–π —á–∞—Ç —Ñ–∏–∑—Ç–µ—Ö–æ–≤, –¥–∞—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ –µ—Å—Ç—å '
        '—á–∞—Ç—ã, –∫–∞–Ω–∞–ª—ã –∏ —Å–µ—Ä–≤–∏—Å—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ –Ω–∞ –§–∏–∑—Ç–µ—Ö–µ.',
        reply_markup=authorize_keyboard
    )
    save_user(message.from_user)



class EmailStatus(StatesGroup):
    WAITING_FOR_EMAIL = State()
    WAITING_FOR_CODE = State()


@router.callback_query(F.data == 'authorize')
async def ask_for_email(update: CallbackQuery | Message, state: FSMContext):
    if isinstance(update, CallbackQuery):
        await update.answer()
        message = update.message
    else:
        message = update

    await message.answer(
        '–î–∞–≤–∞–π —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏–º—Å—è, —á—Ç–æ —Ç—ã –∏–∑ –ú–§–¢–ò. '
        'H–∞–ø–∏—à–∏ —Å–≤–æ—é –ø–æ—á—Ç—É –Ω–∞ –¥–æ–º–µ–Ω–µ <code>@phystech.edu</code> '
        '–∏ –º—ã –≤—ã—à–ª–µ–º –Ω–∞ –Ω–µ—ë —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥. '
        '–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ –∫–æ–¥ —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã '
        '–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç–∏–∫–∞–º üòâ',
        parse_mode='HTML'
    )
    await state.set_state(EmailStatus.WAITING_FOR_EMAIL)


@router.message(EmailStatus.WAITING_FOR_EMAIL)
async def process_email(message: Message, state: FSMContext):
    if not message.text.endswith('@phystech.edu'):
        await message.answer('–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å, —á—Ç–æ-—Ç–æ –Ω–∞ —Ñ–∏–∑—Ç–µ—Ö–æ–≤—Å–∫–æ–º. '
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        return

    save_email(message.from_user, message.text)
    code = send_code(message.text)

    if code is None:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥. –ê–¥–º–∏–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ø—Ä–æ–±–ª–µ–º–µ. '
                             '–°–ø—É—Å—Ç—è –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')
        return

    save_code(message.from_user, code)

    await message.answer(f'–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ –Ω–∞ –ø–æ—á—Ç—É <code>{message.text}</code>. '
                         '–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—é–¥–∞.',
                         parse_mode='HTML')

    await state.set_state(EmailStatus.WAITING_FOR_CODE)


@router.message(EmailStatus.WAITING_FOR_CODE)
async def process_code(message: Message, state: FSMContext):
    bot_user = get_user(message.from_user)

    if bot_user.code != message.text:
        await message.answer('–ì–¥–µ-—Ç–æ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.')
        return

    authorize(message.from_user)

    if bot_user.utm_source_id is not None:
        await welcome_with_utm(message, bot_user.utm_source_id)
    else:
        await welcome_with_no_flood(message)

    await state.clear()


@router.message(F.chat.type == 'private')
async def default_message(message: Message, state: FSMContext):
    bot_user = get_user(message.from_user)

    if bot_user is None:
        await start(message)
    elif bot_user.status != UserStatus.AUTHORIZED:
        await ask_for_email(message, state)
    else:
        await show_chats_and_services(message)
