"""
    This Bot is very cool.
"""

import re
import string
import random
import logging
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import BadRequest

from tgbot.models import User
from tgbot.handlers.logs import send_text
from tgbot.handlers import texts


from OLD.modules.constants import (
    USER_DATA_KEYS, MAIN_CHAT_ID,
    SMTP_SERVER, SMTP_PORT,
    N_MINUTES_PER_INVITE, SMTP_SINGIN, N_CODE
)

from OLD.modules.utilities import *

import os
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DEBUG = True


def make_kb(keys, one_time_keyboard=True):
    return telegram.ReplyKeyboardMarkup(
        keys,
        resize_keyboard=True,
        one_time_keyboard=one_time_keyboard,
    )


def make_kb_inline(keys, ):
    markup = telegram.InlineKeyboardMarkup()
    button0 = telegram.InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data='auth')
    # markup.add(button0)


def gen_random_string(n):
    return ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(n))


# from ohld
def telegram_message_remove_buttons(user_id, message_id):
    bot = telegram.Bot(TELEGRAM_TOKEN)
    try:
        bot.editMessageReplyMarkup(
            chat_id=user_id,
            message_id=message_id,
        )
    except BadRequest:
        pass  # message was already deleted


def telegram_message_delete(user_id, message_id):
    bot = telegram.Bot(TELEGRAM_TOKEN)
    try:
        bot.deleteMessage(chat_id=user_id, message_id=message_id)
    except Exception as e:  # if can't delete - at least remove buttons
        # logger.warning(f"Can't remove message of user_id={user_id}, reason: {e}")
        telegram_message_remove_buttons(user_id, message_id)


def _delete_last_message(query):
    """ Delete last message in chat """
    if query is not None:
        user_id = query.message.chat_id
        message_id = query.message.message_id
        if DEBUG:
            telegram_message_delete(user_id, message_id)
        else:
            telegram_message_delete.delay(user_id, message_id)
# from ohld


def main_menu(update, context):
    user = User.get_user(update, context)
    chat_id = user.user_id
    context.bot.send_message(
        chat_id=chat_id,
        text='üëã',
        reply_markup=telegram.ReplyKeyboardRemove(),
    )
    if user.authorized:
        context.bot.send_message(
            chat_id=chat_id,
            text='–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫–∏–µ –µ—Å—Ç—å —á–∞—Ç—ã/—Å–µ—Ä–≤–∏—Å—ã/–±–ª–æ–≥–∏ —É —Ñ–∏–∑—Ç–µ—Ö–æ–≤?',
            reply_markup=InlineKeyboardMarkup.from_column(
                [
                    InlineKeyboardButton("–ß–∞—Ç—ã", callback_data='chats'),
                    InlineKeyboardButton("–°–µ—Ä–≤–∏—Å—ã", callback_data='services'),
                    InlineKeyboardButton("–ë–ª–æ–≥–∏", callback_data='blogs'),
                ]
            )
        )
    else:
        send_text(f'New user: {user}')
        context.bot.send_message(
            chat_id=chat_id,
            text='–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –æ–±—â–∏–π —á–∞—Ç —Ñ–∏–∑—Ç–µ—Ö–æ–≤, '
                 '–¥–∞—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ –µ—Å—Ç—å '
                 '—á–∞—Ç—ã, –∫–∞–Ω–∞–ª—ã –∏ —Å–µ—Ä–≤–∏—Å—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ –Ω–∞ –§–∏–∑—Ç–µ—Ö–µ.',
            reply_markup=InlineKeyboardMarkup.from_button(
                InlineKeyboardButton('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üëâüëåüèª', callback_data='authorize')
            )
        )


def authorize(update, context):
    user = User.get_user(update, context)

    if user.authorized:
        show_interesting(update, context)
    else:
        chat_id = user.user_id
        send_text(f'authorize: {user}')
        user.in_authorizing = True
        user.save()
        context.bot.send_message(
            chat_id=chat_id,
            text='–î–∞–≤–∞–π —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏–º—Å—è, —á—Ç–æ —Ç—ã –∏–∑ –ú–§–¢–ò. '
                 '–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø–æ—á—Ç—É –Ω–∞ –¥–æ–º–µ–Ω–µ <b>physt–µch.–µdu</b> '
                 '–∏ –º—ã –≤—ã—à–ª–µ–º –Ω–∞ –Ω–µ—ë —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥. '
                 '–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ –∫–æ–¥ —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã '
                 '–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç–∏–∫–∞–º üòâ',
            parse_mode=telegram.ParseMode.HTML
        )


def show_blogs(update, context):
    user = User.get_user(update, context)
    chat_id = user.user_id
    if user.username == 'realkostin' or user.authorized: # TODO: Remove hardcode
        _delete_last_message(update.callback_query)
        context.bot.send_message(
            chat_id=chat_id,
            text=texts.BLOGS,
            parse_mode=telegram.ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup.from_column(
                [
                    InlineKeyboardButton("–ß–∞—Ç—ã", callback_data='chats'),
                    InlineKeyboardButton("–°–µ—Ä–≤–∏—Å—ã", callback_data='services'),
                    InlineKeyboardButton("–ë–ª–æ–≥–∏", callback_data='blogs'),
                ]
            )
        )
    else:
        caught_unauthorized(update, context)


def show_chats(update, context):
    user = User.get_user(update, context)
    chat_id = user.user_id
    if user.username == 'realkostin' or user.authorized:
        _delete_last_message(update.callback_query)
        context.bot.send_message(
            chat_id=chat_id,
            text=texts.CHATS,
            parse_mode=telegram.ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup.from_column(
                [
                    InlineKeyboardButton("–ß–∞—Ç—ã", callback_data='chats'),
                    InlineKeyboardButton("–°–µ—Ä–≤–∏—Å—ã", callback_data='services'),
                    InlineKeyboardButton("–ë–ª–æ–≥–∏", callback_data='blogs'),
                ]
            )
        )
    else:
        caught_unauthorized(update, context)


def show_services(update, context):
    user = User.get_user(update, context)
    chat_id = user.user_id
    if user.username == 'realkostin' or user.authorized:
        _delete_last_message(update.callback_query)
        context.bot.send_message(
            chat_id=chat_id,
            text=texts.SERVICES,
            parse_mode=telegram.ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup.from_column(
                [
                    InlineKeyboardButton("–ß–∞—Ç—ã", callback_data='chats'),
                    InlineKeyboardButton("–°–µ—Ä–≤–∏—Å—ã", callback_data='services'),
                    InlineKeyboardButton("–ë–ª–æ–≥–∏", callback_data='blogs'),
                ]
            )
        )
    else:
        caught_unauthorized(update, context)


def show_interesting(update, context):
    user = User.get_user(update, context)
    chat_id = user.user_id
    context.bot.send_message(
        chat_id=chat_id,
        text='üòÄ'
    )
    context.bot.send_message(
        chat_id=chat_id,
        text='–ü–æ—Å–º–æ—Ç—Ä–∏, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –µ—Å—Ç—å —É —Ñ–∏–∑—Ç–µ—Ö–æ–≤',
        reply_markup=InlineKeyboardMarkup.from_column(
            [
                InlineKeyboardButton("–ß–∞—Ç—ã", callback_data='chats'),
                InlineKeyboardButton("–°–µ—Ä–≤–∏—Å—ã", callback_data='services'),
                InlineKeyboardButton("–ë–ª–æ–≥–∏", callback_data='blogs'),
            ]
        )
    )


def caught_unauthorized(update, context):
    update.message.reply_text('ü§î')
    authorize(update, context)


# def reply_start(update, context):
#     LOGGER = logging.getLogger(f'user#{update.message.from_user.id}')
#     LOGGER.info(f'Show chats.')
#     update.message.reply_text('–ò–Ω–æ–≥–¥–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—Å—ë —Å–Ω–∞—á–∞–ª–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å /start.',
#                               reply_markup=telegram.ReplyKeyboardRemove())


def get_email(update, context):
    user = User.get_user(update, context)
    chat_id = user.user_id
    if not user.in_authorizing:
        send_text(f'in_authorizing: {user.in_authorizing}')
        context.bot.send_message(
            chat_id=chat_id,
            text='–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å, —á—Ç–æ-—Ç–æ –Ω–∞ —Ñ–∏–∑—Ç–µ—Ö–æ–≤—Å–∫–æ–º. '
                 '–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ',
            reply_markup=InlineKeyboardMarkup.from_button(
                InlineKeyboardButton('–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è üëâüëåüèª', callback_data='authorize')
            )
        )
    else:
        # LOGGER = logging.getLogger(f'user#{update.message.from_user.id}')
        email_input = update.message.text.strip().lower()
        send_text(f'in_authorizing: {user.in_authorizing}')
        # Check email is in db
        # if user.email is not None and email_input != user.email:
        #     LOGGER.info(f'Another email exist.')
        #     return update.message.reply_text(
        #         f'–•–º–º–º. –ï—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —á—Ç–æ —É —Ç–µ–±—è –¥—Ä—É–≥–∞—è –ø–æ—á—Ç–∞: {user.email}.\n'
        #         f'–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ —Ç—ã –≤–≤–æ–¥–∏–ª–∏ –∏–º–µ–Ω–Ω–æ –µ—ë —Ä–∞–Ω–µ–µ.'
        #         f'–ï—Å–ª–∏ –æ–ø–µ—á–∞—Ç–∞–ª—Å—è –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –Ω–∞–ø–∏—à–∏ @realkostin',
        #         reply_markup=make_kb([
        #             ['–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —á–∞—Ç'], ['–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã']
        #         ])
        #     )

        # LOGGER.info(f'Record email {email_input}.')
        user.code = gen_random_string(N_CODE)
        send_text(f'code: {user.code}, len: {len(user.code)}')
        user.email = email_input
        user.save()

        message_text = f'–í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥: {user.code}.'
        sent = send_email(email_input, message_text, LOGGER)
        if sent:
            LOGGER.info(f'Successful send message to {user.email}.')
        else:
            LOGGER.error(f'Cannot send message to {user.email}.')

        # TODO: Solve markdown problem
        context.bot.send_message(
            chat_id=chat_id,
            text=f'–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ –Ω–∞ –ø–æ—á—Ç—É <b>{user.email}<b>.\n'
                 '–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—é–¥–∞.',
            parse_mode=telegram.ParseMode.HTML,
        )


# TODO: Add to handler
def wrong_email(update, context):
    update.message.reply_text(
        '–ì–¥–µ-—Ç–æ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.',
        reply_markup=telegram.ReplyKeyboardRemove(),
    )


# def wait_for_code(update, context):
#     user = User.get_user(update, context)
#     LOGGER = logging.getLogger(f'user#{update.message.from_user.id}')
#     LOGGER.info(f'Code reception.')
#
#     code = update.message.text
#     if code == user.code:
#         user.status = "approved"
#         update.message.reply_text('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n'
#                                   f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ã: \n'
#                                   f'\n{RULES}.\n'
#                                   '–ù–∞–ø–∏—à–∏—Ç–µ "–î–∞", –µ—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ã',
#                                   reply_markup=telegram.ReplyKeyboardRemove())
#     else:
#         update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.\n'
#                                   f'–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}',
#                                   reply_markup=ReplyKeyboardRemove())


def send_invitation(update, context):
    user = User.get_user(update, context)
    LOGGER = logging.getLogger(f'user#{update.message.from_user.id}')

    if update.message.text == "–î–∞":
        LOGGER.info(f'Agree with rules.')
        invite_link = bot.exportChatInviteLink(CHANNEL_ID)
        user.invite_link = invite_link
        # TODO: Solve markdown problem
        update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª –§–∏–∑—Ç–µ—Ö.–í–∞–∂–Ω–æ–µ: \n'
                                  f'{invite_link}\n'
                                  '–í–Ω–∏–∑—É —Å –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç **Phystech. No Flood**\n'
                                  '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç–µ—Å—å –≤ —á–∞—Ç.',
                                  reply_markup=make_kb([['–°–ø–∞—Å–∏–±–æ—á–∫–∏']]),
                                  parse_mode=ParseMode.MARKDOWN)
        LOGGER.info(f'Link sent.')

        # Send log to public channel
        bot.sendMessage(chat_id=LOGS_CHANNEL_ID,
                        text=INVITE_LINK_MSG.format(
                            first_name=user.first_name,
                            last_name=user.last_name,
                            username=user.username,
                            uid=user.id))

        # TODO: Record profile
    else:
        LOGGER.warning(f'Misagree with rules.')
        update.message.reply_text('–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏. –ù—É –∂–µ.')


def help_menu(update, context):
    LOGGER = logging.getLogger(f'user#{update.message.from_user.id}')
    LOGGER.info(f'Use help menu.')
    update.message.reply_text("–ü–æ –≤—Å–µ–º –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—Å–∞—Ç—å @realkostin",
                              reply_markup=make_kb([['–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —á–∞—Ç'],
                                                    ['–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã']]))


def error(update, context):
    if not update is None:
        LOGGER = logging.getLogger(f'user#{update.message.from_user.id}')
    else:
        LOGGER = logging.getLogger('root')
    # LOGGER.error(f'Update "{update}" caused error "{error}"')
