"""
    This Bot is very cool.
"""

import re
import logging
import telegram

from tgbot.models import User
from tgbot.handlers.logs import send_text
from tgbot.handlers import texts


def main_menu(update, context):
    user = User.get_user(update, context)
    send_text(f"New user: {user}")
    update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç üëã '
        f'–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –æ–±—â–∏–π —á–∞—Ç —Ñ–∏–∑—Ç–µ—Ö–æ–≤, '
        f'–¥–∞—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ –µ—Å—Ç—å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ '
        f'—á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã –Ω–∞ –§–∏–∑—Ç–µ—Ö–µ.',
        reply_markup=telegram.ReplyKeyboardMarkup([
                ['–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —á–∞—Ç'],
                ['–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã'],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

def add_to_chat(update, context):
    user = User.get_user(update, context)

    # user.is_in_chat = True
    # user.save()

    if user.is_in_chat or user.status == "approved":
        update.message.reply_text(
            '–í—ã —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç. \n'
            '–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, '
            '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É @lego1as.',
            reply_markup=telegram.ReplyKeyboardMarkup(
                [['–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã']],
                resize_keyboard=True,
                one_time_keyboard=True,
            )
        )
    else:
        update.message.reply_text(
            '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ —á–∞—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã –∏–∑ –ú–§–¢–ò. '
            '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É –Ω–∞ –¥–æ–º–µ–Ω–µ <b>phystech.edu</b> '
            '–∏ –º—ã –≤—ã—à–ª–µ–º –Ω–∞ –Ω–µ—ë —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥. '
            '–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –∫–æ–¥ —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã '
            '–∏ –≤–∞–º –¥–∞–¥—É—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç.',
            reply_markup=telegram.ReplyKeyboardRemove(),
            parse_mode=telegram.ParseMode.HTML
        )


def show_chats(update, context):
    update.message.reply_text(
        texts.CHATS,
        parse_mode=telegram.ParseMode.HTML,
        reply_markup=telegram.ReplyKeyboardMarkup(
            [['–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —á–∞—Ç', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã']],
            resize_keyboard=True,
            one_time_keyboard=True,
        ),
    )


def show_services(update, context):
    update.message.reply_text(
        texts.SERVICES,
        parse_mode=telegram.ParseMode.HTML,
        reply_markup=telegram.ReplyKeyboardMarkup(
            [['–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —á–∞—Ç', '–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã']],
            resize_keyboard=True,
            one_time_keyboard=True,
        ),
    )


# def reply_start(update, context):
#     LOGGER = logging.getLogger(f'user#{update.message.from_user.id}')
#     LOGGER.info(f'Show chats.')
#     update.message.reply_text('–ò–Ω–æ–≥–¥–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—Å—ë —Å–Ω–∞—á–∞–ª–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å /start.',
#                               reply_markup=ReplyKeyboardRemove())
#     return MAIN_MENU


# def wait_for_email(bot, update, user_data):
#     LOGGER = logging.getLogger(f'user#{update.message.from_user.id}')
#     text = update.message.text

#     # Check email is in db
#     if (not user_data['email'] is None) and (text != user_data['email']):
#         LOGGER.info(f'Another email exist.')
#         update.message.reply_text(f'–•–º–º–º. –ï—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —á—Ç–æ –≤–∞—à–∞ –ø–æ—á—Ç–∞ –¥—Ä—É–≥–∞—è: {user_data["email"]}.\n'
#                                   f'–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Ç–µ–º, —á—Ç–æ –≤—ã –≤–≤–æ–¥–∏–ª–∏ –µ—ë —Ä–∞–Ω–µ–µ.'
#                                   f'–ï—Å–ª–∏ –≤—ã –æ–ø–µ—á–∞—Ç–∞–ª–∏—Å—å –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –Ω–∞–ø–∏—à–∏—Ç–µ @lego1as',
#                                   reply_markup=make_kb([['–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —á–∞—Ç'],
#                                                         ['–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã']]))
#         stage = MAIN_MENU
#     else:
#         LOGGER.info(f'Record email.')
#         if re.match(r'^(\w|\.)+@phystech\.edu$', text):
#             code = gen_random_string(N_CODE)
#             user_data['email'] = text
#             print(code, user_data['email'])

#             concat_string = (str(code)
#                              + str(user_data['first_name'])
#                              + str(user_data['last_name']))
#             user_data['user_hash'] = hash(concat_string)

#             message_text = f'–í–∞—à –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥: {code}.'
#             sent = send_email(user_data['email'], message_text, LOGGER)
#             if sent:
#                 LOGGER.info(f'Successful send message to {user_data["email"]}.')
#             else:
#                 LOGGER.error(f'Cannot send message to {user_data["email"]}.')

#             # TODO: Solve markdown problem
#             update.message.reply_text(
#                 f'–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ –Ω–∞ –ø–æ—á—Ç—É **{user_data["email"]}**.\n'
#                 '–ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—é–¥–∞.',
#                 parse_mode=ParseMode.MARKDOWN,
#                 reply_markup=ReplyKeyboardRemove(),
#             )
#             stage = WAIT_FOR_EMAIL
#         else:
#             LOGGER.warning(f'Email does not fit pattern.')
#             update.message.reply_text(
#                 '–ì–¥–µ-—Ç–æ –æ—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.',
#                 reply_markup=ReplyKeyboardRemove(),
#             )
#             stage = ADD_TO_CHAT
#     return stage


# def wait_for_code(bot, update, user_data):
#     LOGGER = logging.getLogger(f'user#{update.message.from_user.id}')

#     if user_data['attempt'] is None:
#         user_data['attempt'] = 0

#     user_data['attempt'] = user_data['attempt'] + 1
#     LOGGER.info(f'Code reception. Attempt[{user_data["attempt"]}]')

#     if not user_data['attempt'] % 3:
#         LOGGER.warning(f'Wrong code 3 in times in a row. Attempt[{user_data["attempt"]}]')
#         update.message.reply_text('–í—ã 3 —Ä–∞–∑–∞ –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.\n'
#                                   '–ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ(/start) –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É @lego1as.',
#                                   reply_markup=make_kb([['–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —á–∞—Ç'],
#                                                         ['–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã']]),
#                                   )
#         stage = MAIN_MENU
#     else:
#         hash_standard = user_data['user_hash']
#         code = update.message.text
#         concat_string = (str(code)
#                          + str(user_data['first_name'])
#                          + str(user_data['last_name']))
#         hash_current = hash(concat_string)
#         if hash_current == hash_standard:
#             LOGGER.info(f'Successfully approved. Attempt[{user_data["attempt"]}]')
#             user_data['status'] = "approved"
#             update.message.reply_text('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n'
#                                       f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ã: \n'
#                                       f'\n{RULES}.\n'
#                                       '–ù–∞–ø–∏—à–∏—Ç–µ "–î–∞", –µ—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ã',
#                                       reply_markup=ReplyKeyboardRemove())
#             stage = WAIT_FOR_CODE
#         else:
#             LOGGER.warning(f'Wrong code. Attempt[{user_data["attempt"]}]')
#             attempts_left = 3 - user_data["attempt"] % 3
#             update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.\n'
#                                       f'–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {attempts_left}',
#                                       reply_markup=ReplyKeyboardRemove())
#             stage = WAIT_FOR_EMAIL
#     return stage


# def send_invitation(bot, update, user_data):
#     LOGGER = logging.getLogger(f'user#{update.message.from_user.id}')

#     if update.message.text == "–î–∞":
#         LOGGER.info(f'Agree with rules.')
#         invite_link = bot.exportChatInviteLink(CHANNEL_ID)
#         user_data['invite_link'] = invite_link
#         # TODO: Solve markdown problem
#         update.message.reply_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª –§–∏–∑—Ç–µ—Ö.–í–∞–∂–Ω–æ–µ: \n'
#                                   f'{invite_link}\n'
#                                   '–í–Ω–∏–∑—É —Å –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç **Phystech. No Flood**\n'
#                                   '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç–µ—Å—å –≤ —á–∞—Ç.',
#                                   reply_markup=make_kb([['–°–ø–∞—Å–∏–±–æ—á–∫–∏']]),
#                                   parse_mode=ParseMode.MARKDOWN)
#         LOGGER.info(f'Link sent.')

#         # Send log to public channel
#         bot.sendMessage(chat_id=LOGS_CHANNEL_ID,
#                         text=INVITE_LINK_MSG.format(
#                             first_name=user_data['first_name'],
#                             last_name=user_data['last_name'],
#                             username=user_data['username'],
#                             uid=user_data['id']))

#         # Record profile
#         profile_db = ProfileDB('data/main.sqlite')
#         if None in user_data.values():
#             LOGGER.error(f'None is in user_data!')
#             bot.sendMessage(chat_id=ADMIN_ID,
#                             text=f'–ö–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å user_data: {user_data}')
#         profile_db.update_profile(user_data)

#         stage = SEND_INVITATION
#     else:
#         LOGGER.warning(f'Misagree with rules.')
#         update.message.reply_text('–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏. –ù—É –∂–µ.')
#         stage = WAIT_FOR_CODE
#     return stage


# def help_menu(bot, update):
#     LOGGER = logging.getLogger(f'user#{update.message.from_user.id}')
#     LOGGER.info(f'Use help menu.')
#     update.message.reply_text("–ü–æ –≤—Å–µ–º –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—Å–∞—Ç—å @lego1as",
#                               reply_markup=make_kb([['–î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ —á–∞—Ç'],
#                                                     ['–ü–æ–∫–∞–∑–∞—Ç—å —á–∞—Ç—ã', '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã']]))
#     return MAIN_MENU


# def error(bot, update, error):
#     if not update is None:
#         LOGGER = logging.getLogger(f'user#{update.message.from_user.id}')
#     else:
#         LOGGER = logging.getLogger('root')
#     LOGGER.error(f'Update "{update}" caused error "{error}"')
